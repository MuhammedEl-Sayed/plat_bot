
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import *
from ctypes import windll
from PIL import ImageTk, Image
from tkinter import ttk
from pygments import highlight
import requests as rq
from io import BytesIO
import base64
from time import sleep
import threading
import plat_bot as pb
import random
import os
import sys
GWL_EXSTYLE = -20
WS_EX_APPWINDOW = 0x00040000
WS_EX_TOOLWINDOW = 0x00000080

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



def get_relic():
    vaulted_check = [False, False]
    vaulted_check = check_dropdown(vaulted_check)
    if dropdown_text.get() == dropdown_options[3]:
        relic_name = combo.get()
        req_relic = pb.search_specific_relic(relic_name)
        # only get first 2 decimals
        req_relic.average_price = str(req_relic.average_price)[0:4]
        result_text.config(text="Average Cost of Relic: "+ str(req_relic.average_price))
        result_text.place(relx=0.51, rely=0.9, anchor='center')
        print(req_relic.average_price)
    else:
        print(vaulted_check)
        final_relic = pb.get_best_relic(pb.get_items_id(pb.parseXML(relative_to_assets('relics.xml')), vaulted_check[0], vaulted_check[1]), vaulted_check[0], vaulted_check[1])
        i = 0
        curr_top_ten = dict(sorted(pb.top_ten.items(), key=lambda item: item[1]))
        print(curr_top_ten)
        for key, value in curr_top_ten.items():
            i += 1
            tempText = Label(window, text="Drop #" + str(i) +
                         ": " + key + " - " + str(value), font=("Arial", 10))
            tempText.grid(row=i, column=0)
        result_text.config(text=str(final_relic))

def check_dropdown(vaulted_check):

    if dropdown_text.get() == dropdown_options[0]:
        vaulted_check[0] = False
        vaulted_check[1] = True
    elif dropdown_text.get() == dropdown_options[1]:
        vaulted_check[0] = True
        vaulted_check[1] = False
    elif dropdown_text.get() == dropdown_options[2]:
        vaulted_check[0] = True
        vaulted_check[1] = True
    return vaulted_check

def dropdown_callback(*args):
    global combobox
    if dropdown_text.get() == dropdown_options[3]:
        # Create a list box with the list of relics with a scrollbar
        combo.lift()
        





def thread_relic():
    global relic_thread, photo_thread
    relic_thread = threading.Thread(target=get_relic)
    photo_thread = threading.Thread(target=test_random())
    photo_thread.daemon = True
    relic_thread.daemon = True
    relic_thread.start()
    window.after(50, check_thread_relic)


def check_thread_relic():
    if relic_thread.is_alive():
        if photo_thread.is_alive() == False:
            test_random()
        window.after(50, check_thread_relic)

def test_random():
    image = Image.open(str(str(random_icon())))
    image = image.resize((220, 250), Image.ANTIALIAS)
    temp_photo = ImageTk.PhotoImage(image)

    relic_image_label.config(image=temp_photo)
    relic_image_label.image = temp_photo 
    sleep(0.05)
    window.update()


def random_icon():
    global img
    img = random.choice(
        list(relative_to_assets("images\\relics").glob("*.png")))
    return img


def read_settings():
    global vaulted_var, normal_drops_var
    if os.path.isfile('settings.txt'):
        with open('settings.txt', 'r') as f:
            settings = f.readlines()
        if(len(settings) < 2):
            vaulted_var = 0
            normal_drops_var = 0
        else:
            vaulted_temp = int(settings[0])
            normal_drops_temp = int(settings[1])
            print(vaulted_temp)
            print(normal_drops_temp)
        vaulted_var.set(vaulted_temp)
        normal_drops_var.set(normal_drops_temp)
    else:
        with open('settings.txt', 'w') as f:
            f.write("0\n0")
        vaulted_temp = 0
        normal_drops_temp = 0
        print("no file")


root = Tk()
window = Toplevel(root)
root.attributes("-alpha", 0.0)
window.geometry("400x600")
window.configure(bg="#FFFFFF")
window.update_idletasks()
window.overrideredirect(1)
window.configure(borderwidth=0)
window.attributes('-transparentcolor', 'grey15')

window.attributes('-transparentcolor', 'grey15')
# remove window from window manager
hwnd = windll.user32.GetParent(window.winfo_id())
stylew = windll.user32.GetWindowLongW(hwnd, GWL_EXSTYLE)
stylew = stylew & ~WS_EX_TOOLWINDOW
stylew = stylew | WS_EX_APPWINDOW
res = windll.user32.SetWindowLongW(hwnd, GWL_EXSTYLE, stylew)
# re-assert the new window style
window.wm_withdraw()
window.after(10, lambda: window.wm_deiconify())
window.bind('<Escape>', lambda e: window.destroy())
window.bind('<Button-1>', lambda e: clickwindow(e))
window.bind('<B1-Motion>', lambda e: dragwindow(e))
def onRootIconify(event): window.withdraw()
combo = ttk.Combobox(window, state='readonly')
relic_names = pb.get_relic_names(relative_to_assets('relics.xml'))



        
combo['values'] = relic_names
combo.place(relx=0.5, rely=0.27, anchor=CENTER)
combo.lower()
root.bind("<Unmap>", onRootIconify)
def onRootDeiconify(event): window.deiconify()


root.bind("<Map>", onRootDeiconify)
root.iconbitmap(relative_to_assets('icon.ico'))

def clickwindow(event):
    global offsetx, offsety
    offsetx = event.x
    offsety = event.y
    return offsetx, offsety


def dragwindow(event):
    window.geometry("+{0}+{1}".format(event.x_root -
                    offsetx, event.y_root - offsety))


root.attributes('-transparentcolor', 'grey15')
canvas = Canvas(
    window,
    bg="grey15",
    height=600,
    width=400,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=262.0,
    y=681.0,
    width=85.0,
    height=56.0
)


img1 = PhotoImage("frameFocusBorder", data="""
R0lGODlhQABAAOYAAAAAFWtpazs5O0NBQ1NRU0tJS2NhY1tZW3Nxc4OBg0tJ
TGVjZmRiZkdGSDw6QDQyOUdFTC0sMkA/RTY1PB8eJyYlLwwLHB0bOBEQIRQT
IwYFGgYFGAkIGygnSQAAFAEBFgEBFQEBFAEBEgICFwICFgMDFwMDFgQEGAQE
FwUFGAYGGQcHGgcHGQoKGwsLHQsLHAwMHQ4OHhISIhERIBQUIBsbKQABFQQF
GB8gLBYXICQlLDc4PTM0ODk6PiYoLzc5PTAyNEVHR09RUDs9O0NFQ1NVU0tN
S2NlY1tdW1pcWnt9e3N1c2tta////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUAAE0A
LAAAAABAAEAAAAf/gACCg4SFhoeIiYqLjI2Oj5CRkpOUlZaOE0IBR0xHAZsB
nZ+eoqClpJ6mqZ5CE5RCSBEkl48kEUgKkC0BObSUFAEpjS0Gs76VR8KLAceX
JMyKQhTNlzlCiSkH1LRIyoY/Q9uXAj2ISMbilBpIiNDpyIhH75buhCD185FH
JYYZ8vmTAsBAB6AEDHwAHR3J0O9fQkgCCRpE+HDRwoYVIQ4kNDHjo4uF/Hl0
FJHjwZGNQBISiXLZxkEdWypSOYilzHYvBcW8eYimIJs8C5WEeTKoIZ8AgBoV
NFRn0aWDkCpd2rTgU6gApDrEWnUnVq1YB3W9ChVsWABjKQY1Gzbt2awM/0Nu
hVrVxgq1PH1+uDGXak4ANkoweOuTxIkFb+uO6Gs0QFxCHAIQNKrhCAwQ9lgY
EBBWgIHLhVYU0YYVSREYhkrsOHIB6oUjRlYYAuEiiWSjz5A4MGHoQwkIR4rx
JGHgSBEZFmZ/wGGgU+uWF0IZkDADc+oaRQIgYGKgg4aKJDo0R3DkgI8WiEqc
CHIgwJL3TDbFnx+qPv379vPPZxL/E4L3SwRwgBExWAdACIV8oIIR7f2nRAIQ
RijhhBRWaGECSiixBAICGlGBNwCI0BsGRhRRHBMI/Afgiiy26OKKKr63XXBF
FKADQR54cMgHLxBBwGgGFCdkcEQOaWSRSA5ZpGMBBxRBABEP8EOIjomQwAIP
DRhhBAFbckmAl2B2KeaXY4ZJphEFDAAEDQYKkuMiIGwAwggqvJABDHfmieee
evbJ5595rrACCmwa8iYkmCUKgKKMLupoo5C2aSiVb00pAqUABAIAOw==""")


img2 = PhotoImage("frameBorder", data="""
R0lGODlhQABAAOYAAAAAFWtpazs5O0NBQ1NRU0tJS2NhY1tZW3Nxc4OBg0tJ
TGVjZmRiZkdGSDw6QDQyOUdFTC0sMkA/RTY1PB8eJyYlLwwLHB0bOBEQIRQT
IwYFGgYFGAkIGygnSQAAFAEBFgEBFQEBFAEBEgICFwICFgMDFwMDFgQEGAQE
FwUFGAYGGQcHGgcHGQoKGwsLHQsLHAwMHQ4OHhISIhERIBQUIBsbKQABFQQF
GB8gLBYXICQlLDc4PTM0ODk6PiYoLzc5PTAyNEVHR09RUDs9O0NFQ1NVU0tN
S2NlY1tdW1pcWnt9e3N1c2tta////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUAAE0A
LAAAAABAAEAAAAf/gACCg4SFhoeIiYqLjI2Oj5CRkpOUlZaOE0IBR0xHAZsB
nZ+eoqClpJ6mqZ5CE5RCSBEkl48kEUgKkC0BObSUFAEpjS0Gs76VR8KLAceX
JMyKQhTNlzlCiSkH1LRIyoY/Q9uXAj2ISMbilBpIiNDpyIhH75buhCD185FH
JYYZ8vmTAsBAB6AEDHwAHR3J0O9fQkgCCRpE+HDRwoYVIQ4kNDHjo4uF/Hl0
FJHjwZGNQBISiXLZxkEdWypSOYilzHYvBcW8eYimIJs8C5WEeTKoIZ8AgBoV
NFRn0aWDkCpd2rTgU6gApDrEWnUnVq1YB3W9ChVsWABjKQY1Gzbt2awM/0Nu
hVrVxgq1PH1+uDGXak4ANkoweOuTxIkFb+uO6Gs0QFxCHAIQNKrhCAwQ9lgY
EBBWgIHLhVYU0YYVSREYhkrsOHIB6oUjRlYYAuEiiWSjz5A4MGHoQwkIR4rx
JGHgSBEZFmZ/wGGgU+uWF0IZkDADc+oaRQIgYGKgg4aKJDo0R3DkgI8WiEqc
CHIgwJL3TDbFnx+qPv379vPPZxL/E4L3SwRwgBExWAdACIV8oIIR7f2nRAIQ
RijhhBRWaGECSiixBAICGlGBNwCI0BsGRhRRHBMI/Afgiiy26OKKKr63XXBF
FKADQR54cMgHLxBBwGgGFCdkcEQOaWSRSA5ZpGMBBxRBABEP8EOIjomQwAIP
DRhhBAFbckmAl2B2KeaXY4ZJphEFDAAEDQYKkuMiIGwAwggqvJABDHfmieee
evbJ5595rrACCmwa8iYkmCUKgKKMLupoo5C2aSiVb00pAqUABAIAOw==""")

round_style = ttk.Style()
round_style.element_create("RoundedFrame", "image", "frameBorder",
                           ("focus", "frameFocusBorder"), border=16, sticky="nsew")

round_style.layout("RoundedFrame", [("RoundedFrame", {"sticky": "nsew"})])
round_style.configure("TEntry", borderwidth=0,
                      highlightbackground='#000015', highlightthickness=0, bg='#000015')
round_style.configure("TButton", padding=0, relief='flat',
                      borderwidth=0, background='#000015',)


button_style = ttk.Style

canvas_image = Image.open(relative_to_assets("frameBackground.png")).resize(
    (400, 600), Image.ANTIALIAS)
canvas_image = ImageTk.PhotoImage(canvas_image)


canvas.create_image(0, 0, image=canvas_image, anchor='nw')


frame_dropdown = ttk.Frame(window, width=150, height=50,
                           style='RoundedFrame', relief='flat')
frame_dropdown.place(relx=0.5, rely=0.2, anchor='center')

# DropDOWN
dropdown_options = [
    "Unvaulted Only",
    "Vaulted Only",
    "All",
    "Specific Relic"
]
dropdown_text = StringVar(frame_dropdown)
dropdown_text.set(dropdown_options[0])
dropdown_text.trace("w", dropdown_callback)
dropdown = OptionMenu(frame_dropdown, dropdown_text, *dropdown_options)
dropdown.configure(highlightthickness=0,
                   bd=0,
                   bg='#000015',
                   fg='#FFFFFF',
                   highlightcolor='#000015',
                   activebackground='#000015',
                   activeforeground='#FFFFFF',
                   font="-family {Roboto Medium} -size 9 -weight bold "
                   )
dropdown.place(relx='0.5', rely='0.5', anchor='center')

relic_image = Image.open(str(random_icon()))
relic_image = relic_image.resize((220, 250), Image.ANTIALIAS)
relic_image = ImageTk.PhotoImage(relic_image)

relic_image_label = Label(window, image=relic_image,
                          anchor="center", bg='#000015')
relic_image_label.place(relx=0.22, rely=0.3)

search_image = Image.open(relative_to_assets('button_1.png'))
search_image = search_image.resize((75, 50), Image.ANTIALIAS)
search_image = ImageTk.PhotoImage(search_image)
search_button = Button(window, text="Search", image=search_image)
search_button.config(highlightthickness=0,
                     bd=0,
                     bg='#000015',
                     fg='#FFFFFF',
                     highlightcolor='#000015',
                     activebackground='#000015',
                     activeforeground='#FFFFFF',
                     command=lambda: thread_relic(),
                     font="-family {Roboto Medium} -size 9 -weight bold ")

search_button.place(relx=0.5, rely=0.8, anchor='center')

result_text = StringVar()
vaulted_var = IntVar()
normal_drops_var = IntVar()

result_text = Label(window, width=25, height=3,  bg='#000015', fg='#FFFFFF', font = "-family {Roboto Medium} -size 9 -weight bold ", highlightthickness=0, borderwidth=0)
result_text.place(relx=0.6, rely=0.9, anchor='center')



def on_enter_exit(event):
    exit_button['background'] = '#E75757'


def on_exit_exit(event):
    exit_button['background'] = '#000015'


def on_enter_mini(event):
    minimize_button['background'] = '#8E8E8E'


def on_exit_mini(event):
    minimize_button['background'] = '#000015'


exit_button = Button(
    window,
    text="X",
    bg="#000015",
    fg="#ffffff",
    font="-family {Segoe UI} -size 12 -weight bold ",
    highlightthickness=0,
    relief="flat",
    command=lambda: sys.exit(0),
)
exit_button.bind("<Enter>", on_enter_exit)
exit_button.bind("<Leave>", on_exit_exit)
exit_button.place(relx=0.9, y=0.08, width=40.0, height=40.0, anchor='nw')

minimize_button = Button(
    window,
    text="-",
    bg="#000015",
    fg="#ffffff",
    font="-family {Segoe UI} -size 20 -weight bold ",
    highlightthickness=0,
    relief="flat",
    anchor='center',
    command=lambda: root.iconify(),
)
minimize_button.bind("<Enter>", on_enter_mini)
minimize_button.bind("<Leave>", on_exit_mini)
minimize_button.place(relx=0.8, y=0.08, width=40.0, height=40.0, anchor='nw')
icon = Image.open(relative_to_assets("icon.png"))
icon = icon.resize((20, 20), Image.ANTIALIAS)
icon = ImageTk.PhotoImage(icon)
icon_label = Label(
    window,
    image=icon,
    bg="#000015",
    fg="#ffffff",
    highlightthickness=0,
    relief="flat",
    borderwidth=0,
)
icon_label.place(relx=0.02, rely=0.02, width=30, height=30)

canvas.create_text(
    40.0,
    18.0,
    anchor="nw",
    text="Platinum Bot",
    fill="#FFFFFF",
    font=("Roboto Medium", 16 * -1)
)
window.resizable(False, False)
window.mainloop()
